#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp2:server');
var http = require('http');

/**
 * Get port from command line argument and store in Express.
 * Default port is 7000
 */
var port = normalizePort(process.argv[2] || '7000');

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var clientUrl = "http://localhost:" + port + "/client.html";
console.log("Server running on port " + port);
console.log("Go to " + clientUrl);

// Open web gui in the default browser
var opn = require('opn');
opn(clientUrl);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// -----------------------------------------
// handle Display clients using socket.io
// TODO: move this code to some other module or something

var io = require('socket.io')(server);

// TODO: don't use global variable
// hold display clients
displayClients = [];

// creating a new websocket to keep the content updated without any AJAX request
io.sockets.on('connection', function(socket) {
  console.log("new socket connection");

  // add it to display client list
  displayClients.push(socket);
  console.log("number of displayClients: " + displayClients.length);

  // TODO: send welcome message to new client

  // send the new data to the client
    // remove disconnected client
    socket.on('disconnect', function() {
        var i = displayClients.indexOf(socket);
        displayClients.splice(i,1);
        console.log("socket disconnect");
        console.log("number of displayClients: " + displayClients.length);
    })
});

